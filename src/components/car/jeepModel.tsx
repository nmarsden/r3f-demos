/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/car/jeep.glb -o src/components/car/jeepModel.tsx --transform -j --types 
Files: public/car/jeep.glb [230.19KB] > jeep-transformed.glb [95.42KB] (59%)
*/

import * as THREE from 'three'
import {useGLTF} from '@react-three/drei'
import {GLTF} from 'three-stdlib'
import {animated, SpringValue} from "@react-spring/three";

type GLTFResult = GLTF & {
  nodes: {
    Cube006_Cube001: THREE.Mesh
    Cylinder003: THREE.Mesh
    Circle003: THREE.Mesh
    Circle002: THREE.Mesh
    Cylinder002: THREE.Mesh
    Cube005_Cube008: THREE.Mesh
    Cube003_Cube006: THREE.Mesh
    Cube002_Cube005: THREE.Mesh
    Cube001_Cube004: THREE.Mesh
    Cylinder001: THREE.Mesh
    Circle001: THREE.Mesh
    ['Cube_Cube002-Mesh']: THREE.Mesh
    ['Cube_Cube002-Mesh_1']: THREE.Mesh
    ['Cube_Cube002-Mesh_2']: THREE.Mesh
    ['Cube_Cube002-Mesh_3']: THREE.Mesh
    Circle: THREE.Mesh
    Cylinder: THREE.Mesh
  }
  materials: {
    PaletteMaterial001: THREE.MeshStandardMaterial
  }
}

export function JeepModel({ opacity, ...props } : JSX.IntrinsicElements['group'] & { opacity: SpringValue }) {
  const { nodes, materials } = useGLTF('/r3f-demos/car/jeep-transformed.glb') as GLTFResult
  return (
    <group {...props} dispose={null}>
      {Object.values(nodes).map((node, index) => {
        // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-ignore
        return <animated.mesh
          key={`${index}`}
          geometry={node.geometry}
          castShadow={true}
        >
          {/* eslint-disable-next-line @typescript-eslint/ban-ts-comment */}
          {/* @ts-ignore */}
          <animated.meshStandardMaterial
            {...materials.PaletteMaterial001}
            transparent={true}
            opacity={opacity}
          />
        </animated.mesh>
      })}
    </group>
  )
}

useGLTF.preload('/r3f-demos/car/jeep-transformed.glb')
