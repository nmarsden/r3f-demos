/* eslint-disable @typescript-eslint/ban-ts-comment */

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.13 public/car/jeep.glb -o src/components/car/jeepModel.tsx --transform -j --types 
Files: public/car/jeep.glb [230.19KB] > jeep-transformed.glb [95.42KB] (59%)
*/

import * as THREE from 'three'
import {useGLTF} from '@react-three/drei'
import {GLTF} from 'three-stdlib'
import {animated, SpringValue} from "@react-spring/three";
import {RefObject, useEffect, useMemo, useRef} from "react";
import {RigidBody, RapierRigidBody, useRevoluteJoint} from "@react-three/rapier";

type GLTFResult = GLTF & {
  nodes: {
    Cube006_Cube001: THREE.Mesh           // roll cage
    Cylinder003: THREE.Mesh               // wheel: front-right
    Circle003: THREE.Mesh                 // wheel-hub: front-right
    Circle002: THREE.Mesh                 // wheel-hub: rear-right
    Cylinder002: THREE.Mesh               // wheel: rear-right
    Cube005_Cube008: THREE.Mesh           // suspension
    Cube003_Cube006: THREE.Mesh           // differential
    Cube002_Cube005: THREE.Mesh           // axel: rear
    Cube001_Cube004: THREE.Mesh           // axel: front
    Cylinder001: THREE.Mesh               // wheel: rear-left
    Circle001: THREE.Mesh                 // wheel-hub: rear-left
    ['Cube_Cube002-Mesh']: THREE.Mesh     // trim
    ['Cube_Cube002-Mesh_1']: THREE.Mesh   // body
    ['Cube_Cube002-Mesh_2']: THREE.Mesh   // lights
    ['Cube_Cube002-Mesh_3']: THREE.Mesh   // windshield
    Circle: THREE.Mesh                    // wheel-hub: front-left
    Cylinder: THREE.Mesh                  // wheel: front-left
  }
  materials: {
    PaletteMaterial001: THREE.MeshStandardMaterial
  }
}

type WheelInfo = {
  nodeIndexes: number[];
  nodeHubName: string;
}

const REAR_RIGHT_WHEEL: WheelInfo = {
  nodeIndexes: [3, 4], // hub & wheel
  nodeHubName: 'Circle002'
};
const REAR_LEFT_WHEEL: WheelInfo = {
  nodeIndexes: [9, 10], // wheel & hub
  nodeHubName: 'Circle001'
};
const FRONT_RIGHT_WHEEL: WheelInfo = {
  nodeIndexes: [1, 2], // wheel & hub
  nodeHubName: 'Circle003'
};
const FRONT_LEFT_WHEEL: WheelInfo = {
  nodeIndexes: [16, 17], // hub & wheel
  nodeHubName: 'Circle'
};

const WHEEL_NODE_INDEXES = [...REAR_RIGHT_WHEEL.nodeIndexes, ...REAR_LEFT_WHEEL.nodeIndexes, ...FRONT_RIGHT_WHEEL.nodeIndexes, ...FRONT_LEFT_WHEEL.nodeIndexes];

type WheelProps = {
  opacity: SpringValue;
  wheelInfo: WheelInfo;
  body: RefObject<RapierRigidBody>;
  nodes: GLTFResult['nodes'];
  materials: GLTFResult['materials'];
};

function Wheel({ opacity, wheelInfo, body, nodes, materials } : WheelProps) {
  const wheel = useRef<RapierRigidBody | null>(null);
  const { wheelPosition, inverseWheelPosition } = useMemo(() => {
    // @ts-ignore
    const mesh: THREE.Mesh = nodes[wheelInfo.nodeHubName] as THREE.Mesh;
    const pos = mesh.geometry.boundingBox?.getCenter(new THREE.Vector3()) as THREE.Vector3;

    return {
      wheelPosition: [pos.x, 0, pos.z] as THREE.Vector3Tuple,
      inverseWheelPosition: [-pos.x, -pos.y, -pos.z] as THREE.Vector3Tuple
    };
  }, [nodes, body, wheel]);

  const joint = useRevoluteJoint(body, wheel, [wheelPosition, [0,0,0], [1, 0, 0]]);

  useEffect(() => {
    joint.current?.configureMotorVelocity(15, 10);
  }, [])

  return (
    <RigidBody
      position={wheelPosition}
      ref={wheel}
      colliders="hull"
      type="dynamic"
    >
      <group>
        {Object.values(nodes)
        .filter((_node, index) => wheelInfo.nodeIndexes.includes(index))
        .map((node, index) => {
          // @ts-ignore
          return <animated.mesh
            key={`${index}`}
            geometry={node.geometry}
            castShadow={true}
            position={inverseWheelPosition} /* reset position to [0,0,0] */
          >
            {/* @ts-ignore */}
            <animated.meshStandardMaterial
              {...materials.PaletteMaterial001}
              transparent={true}
              opacity={opacity}
            />
          </animated.mesh>
        })}
      </group>
    </RigidBody>
  );
}
export function JeepModel({ opacity, ...props } : JSX.IntrinsicElements['group'] & { opacity: SpringValue }) {
  const { nodes, materials } = useGLTF('/r3f-demos/car/jeep-transformed.glb') as GLTFResult
  const body = useRef<RapierRigidBody | null>(null);

  return (opacity.isAnimating ? null :
    <group {...props} dispose={null}>
      {/* --- Body --- */}
      <RigidBody
        ref={body}
        colliders="cuboid"
        type="dynamic"
      >
        <group position-y={-1.1}>
          {Object.values(nodes)
            .filter((_node, index) => !WHEEL_NODE_INDEXES.includes(index))
            .map((node, index) => {
            // @ts-ignore
            return <animated.mesh
              key={`${index}`}
              geometry={node.geometry}
              castShadow={true}
            >
              {/* @ts-ignore */}
              <animated.meshStandardMaterial
                {...materials.PaletteMaterial001}
                transparent={true}
                opacity={opacity}
              />
            </animated.mesh>
          })}
        </group>
      </RigidBody>
      {/* --- Wheels --- */}
      <Wheel opacity={opacity} body={body} wheelInfo={FRONT_LEFT_WHEEL} nodes={nodes} materials={materials} />
      <Wheel opacity={opacity} body={body} wheelInfo={FRONT_RIGHT_WHEEL} nodes={nodes} materials={materials} />
      <Wheel opacity={opacity} body={body} wheelInfo={REAR_LEFT_WHEEL} nodes={nodes} materials={materials} />
      <Wheel opacity={opacity} body={body} wheelInfo={REAR_RIGHT_WHEEL} nodes={nodes} materials={materials} />
    </group>
  )
}

useGLTF.preload('/r3f-demos/car/jeep-transformed.glb')
